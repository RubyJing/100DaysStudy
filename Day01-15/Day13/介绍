进程和线程

概念：
1.进程：
    操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，
操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，
不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication)
来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。

2.线程：
    一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是线程。
由于线程在同一个进程下，它们可以共享相同的上下文，因此相当于进程而言，线程间的信息共享和通信更加容易。
当然在单核CPU系统在，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程
共享了CPU的执行时间。

使用多线程实现并发编程为程序带来的好处是不言而喻的，最主要的体现在提升程序的性能和改善用户体验。

Python实现并发编程主要有3种方式：多进程，多线程，多进程+多线程

协程:
    在Python语言中，单线程+异步I/O的编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。
    优势：最大的优势就是极高的执行效率；第二个优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不用加锁
--》充分利用CPU的多核特性Best Way: 多进程+协程